// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cli_to_hub.proto

/*
Package idl is a generated protocol buffer package.

It is generated from these files:
	cli_to_hub.proto
	hub_to_agent.proto

It has these top-level messages:
	UpgradeConvertPrimariesRequest
	UpgradeConvertPrimariesReply
	UpgradeShareOidsRequest
	UpgradeShareOidsReply
	UpgradeValidateStartClusterRequest
	UpgradeValidateStartClusterReply
	PingRequest
	PingReply
	StatusConversionRequest
	StatusConversionReply
	StatusUpgradeRequest
	StatusUpgradeReply
	UpgradeStepStatus
	CheckConfigRequest
	CheckConfigReply
	CheckSeginstallRequest
	CheckSeginstallReply
	PrepareStartAgentsRequest
	PrepareStartAgentsReply
	CountPerDb
	CheckObjectCountRequest
	CheckObjectCountReply
	CheckVersionRequest
	CheckVersionReply
	CheckDiskUsageRequest
	CheckDiskUsageReply
	PrepareShutdownClustersRequest
	PrepareShutdownClustersReply
	PrepareInitClusterRequest
	PrepareInitClusterReply
	UpgradeConvertMasterRequest
	UpgradeConvertMasterReply
	UpgradeConvertPrimarySegmentsRequest
	DataDirPair
	UpgradeConvertPrimarySegmentsReply
	PingAgentsRequest
	PingAgentsReply
	CheckUpgradeStatusRequest
	CheckUpgradeStatusReply
	CheckConversionStatusRequest
	SegmentInfo
	CheckConversionStatusReply
	FileSysUsage
	CheckDiskUsageRequestToAgent
	CheckDiskUsageReplyFromAgent
*/
package idl

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UpgradeSteps int32

const (
	UpgradeSteps_UNKNOWN_STEP           UpgradeSteps = 0
	UpgradeSteps_CHECK_CONFIG           UpgradeSteps = 1
	UpgradeSteps_SEGINSTALL             UpgradeSteps = 2
	UpgradeSteps_PREPARE_INIT_CLUSTER   UpgradeSteps = 3
	UpgradeSteps_MASTERUPGRADE          UpgradeSteps = 4
	UpgradeSteps_STOPPED_CLUSTER        UpgradeSteps = 5
	UpgradeSteps_PREPARE_START_AGENTS   UpgradeSteps = 6
	UpgradeSteps_CONVERSION             UpgradeSteps = 7
	UpgradeSteps_SHARE_OIDS             UpgradeSteps = 8
	UpgradeSteps_VALIDATE_START_CLUSTER UpgradeSteps = 9
	UpgradeSteps_CONVERT_PRIMARIES      UpgradeSteps = 10
)

var UpgradeSteps_name = map[int32]string{
	0:  "UNKNOWN_STEP",
	1:  "CHECK_CONFIG",
	2:  "SEGINSTALL",
	3:  "PREPARE_INIT_CLUSTER",
	4:  "MASTERUPGRADE",
	5:  "STOPPED_CLUSTER",
	6:  "PREPARE_START_AGENTS",
	7:  "CONVERSION",
	8:  "SHARE_OIDS",
	9:  "VALIDATE_START_CLUSTER",
	10: "CONVERT_PRIMARIES",
}
var UpgradeSteps_value = map[string]int32{
	"UNKNOWN_STEP":           0,
	"CHECK_CONFIG":           1,
	"SEGINSTALL":             2,
	"PREPARE_INIT_CLUSTER":   3,
	"MASTERUPGRADE":          4,
	"STOPPED_CLUSTER":        5,
	"PREPARE_START_AGENTS":   6,
	"CONVERSION":             7,
	"SHARE_OIDS":             8,
	"VALIDATE_START_CLUSTER": 9,
	"CONVERT_PRIMARIES":      10,
}

func (x UpgradeSteps) String() string {
	return proto.EnumName(UpgradeSteps_name, int32(x))
}
func (UpgradeSteps) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StepStatus int32

const (
	StepStatus_UNKNOWN_STATUS StepStatus = 0
	StepStatus_PENDING        StepStatus = 1
	StepStatus_RUNNING        StepStatus = 2
	StepStatus_COMPLETE       StepStatus = 3
	StepStatus_FAILED         StepStatus = 4
)

var StepStatus_name = map[int32]string{
	0: "UNKNOWN_STATUS",
	1: "PENDING",
	2: "RUNNING",
	3: "COMPLETE",
	4: "FAILED",
}
var StepStatus_value = map[string]int32{
	"UNKNOWN_STATUS": 0,
	"PENDING":        1,
	"RUNNING":        2,
	"COMPLETE":       3,
	"FAILED":         4,
}

func (x StepStatus) String() string {
	return proto.EnumName(StepStatus_name, int32(x))
}
func (StepStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UpgradeConvertPrimariesRequest struct {
	OldBinDir string `protobuf:"bytes,1,opt,name=OldBinDir" json:"OldBinDir,omitempty"`
	NewBinDir string `protobuf:"bytes,2,opt,name=NewBinDir" json:"NewBinDir,omitempty"`
}

func (m *UpgradeConvertPrimariesRequest) Reset()                    { *m = UpgradeConvertPrimariesRequest{} }
func (m *UpgradeConvertPrimariesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpgradeConvertPrimariesRequest) ProtoMessage()               {}
func (*UpgradeConvertPrimariesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *UpgradeConvertPrimariesRequest) GetOldBinDir() string {
	if m != nil {
		return m.OldBinDir
	}
	return ""
}

func (m *UpgradeConvertPrimariesRequest) GetNewBinDir() string {
	if m != nil {
		return m.NewBinDir
	}
	return ""
}

type UpgradeConvertPrimariesReply struct {
}

func (m *UpgradeConvertPrimariesReply) Reset()                    { *m = UpgradeConvertPrimariesReply{} }
func (m *UpgradeConvertPrimariesReply) String() string            { return proto.CompactTextString(m) }
func (*UpgradeConvertPrimariesReply) ProtoMessage()               {}
func (*UpgradeConvertPrimariesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UpgradeShareOidsRequest struct {
}

func (m *UpgradeShareOidsRequest) Reset()                    { *m = UpgradeShareOidsRequest{} }
func (m *UpgradeShareOidsRequest) String() string            { return proto.CompactTextString(m) }
func (*UpgradeShareOidsRequest) ProtoMessage()               {}
func (*UpgradeShareOidsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type UpgradeShareOidsReply struct {
}

func (m *UpgradeShareOidsReply) Reset()                    { *m = UpgradeShareOidsReply{} }
func (m *UpgradeShareOidsReply) String() string            { return proto.CompactTextString(m) }
func (*UpgradeShareOidsReply) ProtoMessage()               {}
func (*UpgradeShareOidsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UpgradeValidateStartClusterRequest struct {
	NewBinDir  string `protobuf:"bytes,1,opt,name=NewBinDir" json:"NewBinDir,omitempty"`
	NewDataDir string `protobuf:"bytes,2,opt,name=NewDataDir" json:"NewDataDir,omitempty"`
}

func (m *UpgradeValidateStartClusterRequest) Reset()         { *m = UpgradeValidateStartClusterRequest{} }
func (m *UpgradeValidateStartClusterRequest) String() string { return proto.CompactTextString(m) }
func (*UpgradeValidateStartClusterRequest) ProtoMessage()    {}
func (*UpgradeValidateStartClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4}
}

func (m *UpgradeValidateStartClusterRequest) GetNewBinDir() string {
	if m != nil {
		return m.NewBinDir
	}
	return ""
}

func (m *UpgradeValidateStartClusterRequest) GetNewDataDir() string {
	if m != nil {
		return m.NewDataDir
	}
	return ""
}

type UpgradeValidateStartClusterReply struct {
}

func (m *UpgradeValidateStartClusterReply) Reset()         { *m = UpgradeValidateStartClusterReply{} }
func (m *UpgradeValidateStartClusterReply) String() string { return proto.CompactTextString(m) }
func (*UpgradeValidateStartClusterReply) ProtoMessage()    {}
func (*UpgradeValidateStartClusterReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{5}
}

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PingReply struct {
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type StatusConversionRequest struct {
}

func (m *StatusConversionRequest) Reset()                    { *m = StatusConversionRequest{} }
func (m *StatusConversionRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusConversionRequest) ProtoMessage()               {}
func (*StatusConversionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type StatusConversionReply struct {
	ConversionStatuses []string `protobuf:"bytes,1,rep,name=conversionStatuses" json:"conversionStatuses,omitempty"`
}

func (m *StatusConversionReply) Reset()                    { *m = StatusConversionReply{} }
func (m *StatusConversionReply) String() string            { return proto.CompactTextString(m) }
func (*StatusConversionReply) ProtoMessage()               {}
func (*StatusConversionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *StatusConversionReply) GetConversionStatuses() []string {
	if m != nil {
		return m.ConversionStatuses
	}
	return nil
}

type StatusUpgradeRequest struct {
}

func (m *StatusUpgradeRequest) Reset()                    { *m = StatusUpgradeRequest{} }
func (m *StatusUpgradeRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusUpgradeRequest) ProtoMessage()               {}
func (*StatusUpgradeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type StatusUpgradeReply struct {
	ListOfUpgradeStepStatuses []*UpgradeStepStatus `protobuf:"bytes,1,rep,name=listOfUpgradeStepStatuses" json:"listOfUpgradeStepStatuses,omitempty"`
}

func (m *StatusUpgradeReply) Reset()                    { *m = StatusUpgradeReply{} }
func (m *StatusUpgradeReply) String() string            { return proto.CompactTextString(m) }
func (*StatusUpgradeReply) ProtoMessage()               {}
func (*StatusUpgradeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StatusUpgradeReply) GetListOfUpgradeStepStatuses() []*UpgradeStepStatus {
	if m != nil {
		return m.ListOfUpgradeStepStatuses
	}
	return nil
}

type UpgradeStepStatus struct {
	Step   UpgradeSteps `protobuf:"varint,1,opt,name=step,enum=idl.UpgradeSteps" json:"step,omitempty"`
	Status StepStatus   `protobuf:"varint,2,opt,name=status,enum=idl.StepStatus" json:"status,omitempty"`
}

func (m *UpgradeStepStatus) Reset()                    { *m = UpgradeStepStatus{} }
func (m *UpgradeStepStatus) String() string            { return proto.CompactTextString(m) }
func (*UpgradeStepStatus) ProtoMessage()               {}
func (*UpgradeStepStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpgradeStepStatus) GetStep() UpgradeSteps {
	if m != nil {
		return m.Step
	}
	return UpgradeSteps_UNKNOWN_STEP
}

func (m *UpgradeStepStatus) GetStatus() StepStatus {
	if m != nil {
		return m.Status
	}
	return StepStatus_UNKNOWN_STATUS
}

type CheckConfigRequest struct {
	DbPort int32 `protobuf:"varint,1,opt,name=dbPort" json:"dbPort,omitempty"`
}

func (m *CheckConfigRequest) Reset()                    { *m = CheckConfigRequest{} }
func (m *CheckConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckConfigRequest) ProtoMessage()               {}
func (*CheckConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CheckConfigRequest) GetDbPort() int32 {
	if m != nil {
		return m.DbPort
	}
	return 0
}

// Consider removing the status as errors are/should be put on the error field.
type CheckConfigReply struct {
	ConfigStatus string `protobuf:"bytes,1,opt,name=configStatus" json:"configStatus,omitempty"`
}

func (m *CheckConfigReply) Reset()                    { *m = CheckConfigReply{} }
func (m *CheckConfigReply) String() string            { return proto.CompactTextString(m) }
func (*CheckConfigReply) ProtoMessage()               {}
func (*CheckConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CheckConfigReply) GetConfigStatus() string {
	if m != nil {
		return m.ConfigStatus
	}
	return ""
}

type CheckSeginstallRequest struct {
}

func (m *CheckSeginstallRequest) Reset()                    { *m = CheckSeginstallRequest{} }
func (m *CheckSeginstallRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckSeginstallRequest) ProtoMessage()               {}
func (*CheckSeginstallRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type CheckSeginstallReply struct {
}

func (m *CheckSeginstallReply) Reset()                    { *m = CheckSeginstallReply{} }
func (m *CheckSeginstallReply) String() string            { return proto.CompactTextString(m) }
func (*CheckSeginstallReply) ProtoMessage()               {}
func (*CheckSeginstallReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type PrepareStartAgentsRequest struct {
}

func (m *PrepareStartAgentsRequest) Reset()                    { *m = PrepareStartAgentsRequest{} }
func (m *PrepareStartAgentsRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepareStartAgentsRequest) ProtoMessage()               {}
func (*PrepareStartAgentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type PrepareStartAgentsReply struct {
}

func (m *PrepareStartAgentsReply) Reset()                    { *m = PrepareStartAgentsReply{} }
func (m *PrepareStartAgentsReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareStartAgentsReply) ProtoMessage()               {}
func (*PrepareStartAgentsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type CountPerDb struct {
	DbName    string `protobuf:"bytes,1,opt,name=DbName" json:"DbName,omitempty"`
	AoCount   int32  `protobuf:"varint,2,opt,name=AoCount" json:"AoCount,omitempty"`
	HeapCount int32  `protobuf:"varint,3,opt,name=HeapCount" json:"HeapCount,omitempty"`
}

func (m *CountPerDb) Reset()                    { *m = CountPerDb{} }
func (m *CountPerDb) String() string            { return proto.CompactTextString(m) }
func (*CountPerDb) ProtoMessage()               {}
func (*CountPerDb) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *CountPerDb) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *CountPerDb) GetAoCount() int32 {
	if m != nil {
		return m.AoCount
	}
	return 0
}

func (m *CountPerDb) GetHeapCount() int32 {
	if m != nil {
		return m.HeapCount
	}
	return 0
}

type CheckObjectCountRequest struct {
	DbPort int32 `protobuf:"varint,1,opt,name=DbPort" json:"DbPort,omitempty"`
}

func (m *CheckObjectCountRequest) Reset()                    { *m = CheckObjectCountRequest{} }
func (m *CheckObjectCountRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckObjectCountRequest) ProtoMessage()               {}
func (*CheckObjectCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CheckObjectCountRequest) GetDbPort() int32 {
	if m != nil {
		return m.DbPort
	}
	return 0
}

type CheckObjectCountReply struct {
	ListOfCounts []*CountPerDb `protobuf:"bytes,1,rep,name=list_of_counts,json=listOfCounts" json:"list_of_counts,omitempty"`
}

func (m *CheckObjectCountReply) Reset()                    { *m = CheckObjectCountReply{} }
func (m *CheckObjectCountReply) String() string            { return proto.CompactTextString(m) }
func (*CheckObjectCountReply) ProtoMessage()               {}
func (*CheckObjectCountReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CheckObjectCountReply) GetListOfCounts() []*CountPerDb {
	if m != nil {
		return m.ListOfCounts
	}
	return nil
}

type CheckVersionRequest struct {
	DbPort int32  `protobuf:"varint,1,opt,name=DbPort" json:"DbPort,omitempty"`
	Host   string `protobuf:"bytes,2,opt,name=Host" json:"Host,omitempty"`
}

func (m *CheckVersionRequest) Reset()                    { *m = CheckVersionRequest{} }
func (m *CheckVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckVersionRequest) ProtoMessage()               {}
func (*CheckVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CheckVersionRequest) GetDbPort() int32 {
	if m != nil {
		return m.DbPort
	}
	return 0
}

func (m *CheckVersionRequest) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

type CheckVersionReply struct {
	IsVersionCompatible bool `protobuf:"varint,1,opt,name=IsVersionCompatible" json:"IsVersionCompatible,omitempty"`
}

func (m *CheckVersionReply) Reset()                    { *m = CheckVersionReply{} }
func (m *CheckVersionReply) String() string            { return proto.CompactTextString(m) }
func (*CheckVersionReply) ProtoMessage()               {}
func (*CheckVersionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CheckVersionReply) GetIsVersionCompatible() bool {
	if m != nil {
		return m.IsVersionCompatible
	}
	return false
}

type CheckDiskUsageRequest struct {
}

func (m *CheckDiskUsageRequest) Reset()                    { *m = CheckDiskUsageRequest{} }
func (m *CheckDiskUsageRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckDiskUsageRequest) ProtoMessage()               {}
func (*CheckDiskUsageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type CheckDiskUsageReply struct {
	SegmentFileSysUsage []string `protobuf:"bytes,1,rep,name=SegmentFileSysUsage" json:"SegmentFileSysUsage,omitempty"`
}

func (m *CheckDiskUsageReply) Reset()                    { *m = CheckDiskUsageReply{} }
func (m *CheckDiskUsageReply) String() string            { return proto.CompactTextString(m) }
func (*CheckDiskUsageReply) ProtoMessage()               {}
func (*CheckDiskUsageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CheckDiskUsageReply) GetSegmentFileSysUsage() []string {
	if m != nil {
		return m.SegmentFileSysUsage
	}
	return nil
}

type PrepareShutdownClustersRequest struct {
	OldBinDir string `protobuf:"bytes,1,opt,name=oldBinDir" json:"oldBinDir,omitempty"`
	NewBinDir string `protobuf:"bytes,2,opt,name=newBinDir" json:"newBinDir,omitempty"`
}

func (m *PrepareShutdownClustersRequest) Reset()                    { *m = PrepareShutdownClustersRequest{} }
func (m *PrepareShutdownClustersRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepareShutdownClustersRequest) ProtoMessage()               {}
func (*PrepareShutdownClustersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PrepareShutdownClustersRequest) GetOldBinDir() string {
	if m != nil {
		return m.OldBinDir
	}
	return ""
}

func (m *PrepareShutdownClustersRequest) GetNewBinDir() string {
	if m != nil {
		return m.NewBinDir
	}
	return ""
}

type PrepareShutdownClustersReply struct {
}

func (m *PrepareShutdownClustersReply) Reset()                    { *m = PrepareShutdownClustersReply{} }
func (m *PrepareShutdownClustersReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareShutdownClustersReply) ProtoMessage()               {}
func (*PrepareShutdownClustersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type PrepareInitClusterRequest struct {
	DbPort int32 `protobuf:"varint,1,opt,name=dbPort" json:"dbPort,omitempty"`
}

func (m *PrepareInitClusterRequest) Reset()                    { *m = PrepareInitClusterRequest{} }
func (m *PrepareInitClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*PrepareInitClusterRequest) ProtoMessage()               {}
func (*PrepareInitClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PrepareInitClusterRequest) GetDbPort() int32 {
	if m != nil {
		return m.DbPort
	}
	return 0
}

type PrepareInitClusterReply struct {
}

func (m *PrepareInitClusterReply) Reset()                    { *m = PrepareInitClusterReply{} }
func (m *PrepareInitClusterReply) String() string            { return proto.CompactTextString(m) }
func (*PrepareInitClusterReply) ProtoMessage()               {}
func (*PrepareInitClusterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

type UpgradeConvertMasterRequest struct {
	OldBinDir  string `protobuf:"bytes,1,opt,name=OldBinDir" json:"OldBinDir,omitempty"`
	OldDataDir string `protobuf:"bytes,2,opt,name=OldDataDir" json:"OldDataDir,omitempty"`
	NewBinDir  string `protobuf:"bytes,3,opt,name=NewBinDir" json:"NewBinDir,omitempty"`
	NewDataDir string `protobuf:"bytes,4,opt,name=NewDataDir" json:"NewDataDir,omitempty"`
}

func (m *UpgradeConvertMasterRequest) Reset()                    { *m = UpgradeConvertMasterRequest{} }
func (m *UpgradeConvertMasterRequest) String() string            { return proto.CompactTextString(m) }
func (*UpgradeConvertMasterRequest) ProtoMessage()               {}
func (*UpgradeConvertMasterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpgradeConvertMasterRequest) GetOldBinDir() string {
	if m != nil {
		return m.OldBinDir
	}
	return ""
}

func (m *UpgradeConvertMasterRequest) GetOldDataDir() string {
	if m != nil {
		return m.OldDataDir
	}
	return ""
}

func (m *UpgradeConvertMasterRequest) GetNewBinDir() string {
	if m != nil {
		return m.NewBinDir
	}
	return ""
}

func (m *UpgradeConvertMasterRequest) GetNewDataDir() string {
	if m != nil {
		return m.NewDataDir
	}
	return ""
}

type UpgradeConvertMasterReply struct {
}

func (m *UpgradeConvertMasterReply) Reset()                    { *m = UpgradeConvertMasterReply{} }
func (m *UpgradeConvertMasterReply) String() string            { return proto.CompactTextString(m) }
func (*UpgradeConvertMasterReply) ProtoMessage()               {}
func (*UpgradeConvertMasterReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func init() {
	proto.RegisterType((*UpgradeConvertPrimariesRequest)(nil), "idl.UpgradeConvertPrimariesRequest")
	proto.RegisterType((*UpgradeConvertPrimariesReply)(nil), "idl.UpgradeConvertPrimariesReply")
	proto.RegisterType((*UpgradeShareOidsRequest)(nil), "idl.UpgradeShareOidsRequest")
	proto.RegisterType((*UpgradeShareOidsReply)(nil), "idl.UpgradeShareOidsReply")
	proto.RegisterType((*UpgradeValidateStartClusterRequest)(nil), "idl.UpgradeValidateStartClusterRequest")
	proto.RegisterType((*UpgradeValidateStartClusterReply)(nil), "idl.UpgradeValidateStartClusterReply")
	proto.RegisterType((*PingRequest)(nil), "idl.PingRequest")
	proto.RegisterType((*PingReply)(nil), "idl.PingReply")
	proto.RegisterType((*StatusConversionRequest)(nil), "idl.StatusConversionRequest")
	proto.RegisterType((*StatusConversionReply)(nil), "idl.StatusConversionReply")
	proto.RegisterType((*StatusUpgradeRequest)(nil), "idl.StatusUpgradeRequest")
	proto.RegisterType((*StatusUpgradeReply)(nil), "idl.StatusUpgradeReply")
	proto.RegisterType((*UpgradeStepStatus)(nil), "idl.UpgradeStepStatus")
	proto.RegisterType((*CheckConfigRequest)(nil), "idl.CheckConfigRequest")
	proto.RegisterType((*CheckConfigReply)(nil), "idl.CheckConfigReply")
	proto.RegisterType((*CheckSeginstallRequest)(nil), "idl.CheckSeginstallRequest")
	proto.RegisterType((*CheckSeginstallReply)(nil), "idl.CheckSeginstallReply")
	proto.RegisterType((*PrepareStartAgentsRequest)(nil), "idl.PrepareStartAgentsRequest")
	proto.RegisterType((*PrepareStartAgentsReply)(nil), "idl.PrepareStartAgentsReply")
	proto.RegisterType((*CountPerDb)(nil), "idl.CountPerDb")
	proto.RegisterType((*CheckObjectCountRequest)(nil), "idl.CheckObjectCountRequest")
	proto.RegisterType((*CheckObjectCountReply)(nil), "idl.CheckObjectCountReply")
	proto.RegisterType((*CheckVersionRequest)(nil), "idl.CheckVersionRequest")
	proto.RegisterType((*CheckVersionReply)(nil), "idl.CheckVersionReply")
	proto.RegisterType((*CheckDiskUsageRequest)(nil), "idl.CheckDiskUsageRequest")
	proto.RegisterType((*CheckDiskUsageReply)(nil), "idl.CheckDiskUsageReply")
	proto.RegisterType((*PrepareShutdownClustersRequest)(nil), "idl.PrepareShutdownClustersRequest")
	proto.RegisterType((*PrepareShutdownClustersReply)(nil), "idl.PrepareShutdownClustersReply")
	proto.RegisterType((*PrepareInitClusterRequest)(nil), "idl.PrepareInitClusterRequest")
	proto.RegisterType((*PrepareInitClusterReply)(nil), "idl.PrepareInitClusterReply")
	proto.RegisterType((*UpgradeConvertMasterRequest)(nil), "idl.UpgradeConvertMasterRequest")
	proto.RegisterType((*UpgradeConvertMasterReply)(nil), "idl.UpgradeConvertMasterReply")
	proto.RegisterEnum("idl.UpgradeSteps", UpgradeSteps_name, UpgradeSteps_value)
	proto.RegisterEnum("idl.StepStatus", StepStatus_name, StepStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CliToHub service

type CliToHubClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	StatusUpgrade(ctx context.Context, in *StatusUpgradeRequest, opts ...grpc.CallOption) (*StatusUpgradeReply, error)
	StatusConversion(ctx context.Context, in *StatusConversionRequest, opts ...grpc.CallOption) (*StatusConversionReply, error)
	CheckConfig(ctx context.Context, in *CheckConfigRequest, opts ...grpc.CallOption) (*CheckConfigReply, error)
	CheckSeginstall(ctx context.Context, in *CheckSeginstallRequest, opts ...grpc.CallOption) (*CheckSeginstallReply, error)
	CheckObjectCount(ctx context.Context, in *CheckObjectCountRequest, opts ...grpc.CallOption) (*CheckObjectCountReply, error)
	CheckVersion(ctx context.Context, in *CheckVersionRequest, opts ...grpc.CallOption) (*CheckVersionReply, error)
	CheckDiskUsage(ctx context.Context, in *CheckDiskUsageRequest, opts ...grpc.CallOption) (*CheckDiskUsageReply, error)
	PrepareInitCluster(ctx context.Context, in *PrepareInitClusterRequest, opts ...grpc.CallOption) (*PrepareInitClusterReply, error)
	PrepareShutdownClusters(ctx context.Context, in *PrepareShutdownClustersRequest, opts ...grpc.CallOption) (*PrepareShutdownClustersReply, error)
	UpgradeConvertMaster(ctx context.Context, in *UpgradeConvertMasterRequest, opts ...grpc.CallOption) (*UpgradeConvertMasterReply, error)
	PrepareStartAgents(ctx context.Context, in *PrepareStartAgentsRequest, opts ...grpc.CallOption) (*PrepareStartAgentsReply, error)
	UpgradeShareOids(ctx context.Context, in *UpgradeShareOidsRequest, opts ...grpc.CallOption) (*UpgradeShareOidsReply, error)
	UpgradeValidateStartCluster(ctx context.Context, in *UpgradeValidateStartClusterRequest, opts ...grpc.CallOption) (*UpgradeValidateStartClusterReply, error)
	UpgradeConvertPrimaries(ctx context.Context, in *UpgradeConvertPrimariesRequest, opts ...grpc.CallOption) (*UpgradeConvertPrimariesReply, error)
}

type cliToHubClient struct {
	cc *grpc.ClientConn
}

func NewCliToHubClient(cc *grpc.ClientConn) CliToHubClient {
	return &cliToHubClient{cc}
}

func (c *cliToHubClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) StatusUpgrade(ctx context.Context, in *StatusUpgradeRequest, opts ...grpc.CallOption) (*StatusUpgradeReply, error) {
	out := new(StatusUpgradeReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/StatusUpgrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) StatusConversion(ctx context.Context, in *StatusConversionRequest, opts ...grpc.CallOption) (*StatusConversionReply, error) {
	out := new(StatusConversionReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/StatusConversion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) CheckConfig(ctx context.Context, in *CheckConfigRequest, opts ...grpc.CallOption) (*CheckConfigReply, error) {
	out := new(CheckConfigReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/CheckConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) CheckSeginstall(ctx context.Context, in *CheckSeginstallRequest, opts ...grpc.CallOption) (*CheckSeginstallReply, error) {
	out := new(CheckSeginstallReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/CheckSeginstall", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) CheckObjectCount(ctx context.Context, in *CheckObjectCountRequest, opts ...grpc.CallOption) (*CheckObjectCountReply, error) {
	out := new(CheckObjectCountReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/CheckObjectCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) CheckVersion(ctx context.Context, in *CheckVersionRequest, opts ...grpc.CallOption) (*CheckVersionReply, error) {
	out := new(CheckVersionReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/CheckVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) CheckDiskUsage(ctx context.Context, in *CheckDiskUsageRequest, opts ...grpc.CallOption) (*CheckDiskUsageReply, error) {
	out := new(CheckDiskUsageReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/CheckDiskUsage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) PrepareInitCluster(ctx context.Context, in *PrepareInitClusterRequest, opts ...grpc.CallOption) (*PrepareInitClusterReply, error) {
	out := new(PrepareInitClusterReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/PrepareInitCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) PrepareShutdownClusters(ctx context.Context, in *PrepareShutdownClustersRequest, opts ...grpc.CallOption) (*PrepareShutdownClustersReply, error) {
	out := new(PrepareShutdownClustersReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/PrepareShutdownClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) UpgradeConvertMaster(ctx context.Context, in *UpgradeConvertMasterRequest, opts ...grpc.CallOption) (*UpgradeConvertMasterReply, error) {
	out := new(UpgradeConvertMasterReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/UpgradeConvertMaster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) PrepareStartAgents(ctx context.Context, in *PrepareStartAgentsRequest, opts ...grpc.CallOption) (*PrepareStartAgentsReply, error) {
	out := new(PrepareStartAgentsReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/PrepareStartAgents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) UpgradeShareOids(ctx context.Context, in *UpgradeShareOidsRequest, opts ...grpc.CallOption) (*UpgradeShareOidsReply, error) {
	out := new(UpgradeShareOidsReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/UpgradeShareOids", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) UpgradeValidateStartCluster(ctx context.Context, in *UpgradeValidateStartClusterRequest, opts ...grpc.CallOption) (*UpgradeValidateStartClusterReply, error) {
	out := new(UpgradeValidateStartClusterReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/UpgradeValidateStartCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliToHubClient) UpgradeConvertPrimaries(ctx context.Context, in *UpgradeConvertPrimariesRequest, opts ...grpc.CallOption) (*UpgradeConvertPrimariesReply, error) {
	out := new(UpgradeConvertPrimariesReply)
	err := grpc.Invoke(ctx, "/idl.CliToHub/UpgradeConvertPrimaries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CliToHub service

type CliToHubServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	StatusUpgrade(context.Context, *StatusUpgradeRequest) (*StatusUpgradeReply, error)
	StatusConversion(context.Context, *StatusConversionRequest) (*StatusConversionReply, error)
	CheckConfig(context.Context, *CheckConfigRequest) (*CheckConfigReply, error)
	CheckSeginstall(context.Context, *CheckSeginstallRequest) (*CheckSeginstallReply, error)
	CheckObjectCount(context.Context, *CheckObjectCountRequest) (*CheckObjectCountReply, error)
	CheckVersion(context.Context, *CheckVersionRequest) (*CheckVersionReply, error)
	CheckDiskUsage(context.Context, *CheckDiskUsageRequest) (*CheckDiskUsageReply, error)
	PrepareInitCluster(context.Context, *PrepareInitClusterRequest) (*PrepareInitClusterReply, error)
	PrepareShutdownClusters(context.Context, *PrepareShutdownClustersRequest) (*PrepareShutdownClustersReply, error)
	UpgradeConvertMaster(context.Context, *UpgradeConvertMasterRequest) (*UpgradeConvertMasterReply, error)
	PrepareStartAgents(context.Context, *PrepareStartAgentsRequest) (*PrepareStartAgentsReply, error)
	UpgradeShareOids(context.Context, *UpgradeShareOidsRequest) (*UpgradeShareOidsReply, error)
	UpgradeValidateStartCluster(context.Context, *UpgradeValidateStartClusterRequest) (*UpgradeValidateStartClusterReply, error)
	UpgradeConvertPrimaries(context.Context, *UpgradeConvertPrimariesRequest) (*UpgradeConvertPrimariesReply, error)
}

func RegisterCliToHubServer(s *grpc.Server, srv CliToHubServer) {
	s.RegisterService(&_CliToHub_serviceDesc, srv)
}

func _CliToHub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_StatusUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).StatusUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/StatusUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).StatusUpgrade(ctx, req.(*StatusUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_StatusConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).StatusConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/StatusConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).StatusConversion(ctx, req.(*StatusConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_CheckConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).CheckConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/CheckConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).CheckConfig(ctx, req.(*CheckConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_CheckSeginstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckSeginstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).CheckSeginstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/CheckSeginstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).CheckSeginstall(ctx, req.(*CheckSeginstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_CheckObjectCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckObjectCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).CheckObjectCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/CheckObjectCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).CheckObjectCount(ctx, req.(*CheckObjectCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_CheckVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).CheckVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/CheckVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).CheckVersion(ctx, req.(*CheckVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_CheckDiskUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDiskUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).CheckDiskUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/CheckDiskUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).CheckDiskUsage(ctx, req.(*CheckDiskUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_PrepareInitCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareInitClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).PrepareInitCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/PrepareInitCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).PrepareInitCluster(ctx, req.(*PrepareInitClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_PrepareShutdownClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareShutdownClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).PrepareShutdownClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/PrepareShutdownClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).PrepareShutdownClusters(ctx, req.(*PrepareShutdownClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_UpgradeConvertMaster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeConvertMasterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).UpgradeConvertMaster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/UpgradeConvertMaster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).UpgradeConvertMaster(ctx, req.(*UpgradeConvertMasterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_PrepareStartAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareStartAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).PrepareStartAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/PrepareStartAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).PrepareStartAgents(ctx, req.(*PrepareStartAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_UpgradeShareOids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeShareOidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).UpgradeShareOids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/UpgradeShareOids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).UpgradeShareOids(ctx, req.(*UpgradeShareOidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_UpgradeValidateStartCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeValidateStartClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).UpgradeValidateStartCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/UpgradeValidateStartCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).UpgradeValidateStartCluster(ctx, req.(*UpgradeValidateStartClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliToHub_UpgradeConvertPrimaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeConvertPrimariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliToHubServer).UpgradeConvertPrimaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/idl.CliToHub/UpgradeConvertPrimaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliToHubServer).UpgradeConvertPrimaries(ctx, req.(*UpgradeConvertPrimariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CliToHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "idl.CliToHub",
	HandlerType: (*CliToHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CliToHub_Ping_Handler,
		},
		{
			MethodName: "StatusUpgrade",
			Handler:    _CliToHub_StatusUpgrade_Handler,
		},
		{
			MethodName: "StatusConversion",
			Handler:    _CliToHub_StatusConversion_Handler,
		},
		{
			MethodName: "CheckConfig",
			Handler:    _CliToHub_CheckConfig_Handler,
		},
		{
			MethodName: "CheckSeginstall",
			Handler:    _CliToHub_CheckSeginstall_Handler,
		},
		{
			MethodName: "CheckObjectCount",
			Handler:    _CliToHub_CheckObjectCount_Handler,
		},
		{
			MethodName: "CheckVersion",
			Handler:    _CliToHub_CheckVersion_Handler,
		},
		{
			MethodName: "CheckDiskUsage",
			Handler:    _CliToHub_CheckDiskUsage_Handler,
		},
		{
			MethodName: "PrepareInitCluster",
			Handler:    _CliToHub_PrepareInitCluster_Handler,
		},
		{
			MethodName: "PrepareShutdownClusters",
			Handler:    _CliToHub_PrepareShutdownClusters_Handler,
		},
		{
			MethodName: "UpgradeConvertMaster",
			Handler:    _CliToHub_UpgradeConvertMaster_Handler,
		},
		{
			MethodName: "PrepareStartAgents",
			Handler:    _CliToHub_PrepareStartAgents_Handler,
		},
		{
			MethodName: "UpgradeShareOids",
			Handler:    _CliToHub_UpgradeShareOids_Handler,
		},
		{
			MethodName: "UpgradeValidateStartCluster",
			Handler:    _CliToHub_UpgradeValidateStartCluster_Handler,
		},
		{
			MethodName: "UpgradeConvertPrimaries",
			Handler:    _CliToHub_UpgradeConvertPrimaries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cli_to_hub.proto",
}

func init() { proto.RegisterFile("cli_to_hub.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x57, 0xeb, 0x6e, 0xa3, 0xc6,
	0x17, 0xb7, 0x63, 0xe7, 0xe2, 0x63, 0xc7, 0x21, 0x93, 0xc4, 0xb1, 0x49, 0x64, 0xe5, 0xcf, 0x5f,
	0xab, 0x5d, 0x45, 0x55, 0xd4, 0x66, 0xd5, 0x7e, 0xad, 0x58, 0x20, 0x31, 0x8a, 0x03, 0x08, 0x70,
	0x2a, 0x55, 0x2b, 0x59, 0xd8, 0x9e, 0x38, 0xec, 0x12, 0x70, 0x01, 0x37, 0xca, 0xa3, 0xf4, 0x9d,
	0xfa, 0x32, 0x7d, 0x83, 0x6a, 0xb8, 0x98, 0xbb, 0xfb, 0x8d, 0x39, 0xbf, 0x73, 0x9b, 0x33, 0x67,
	0x7e, 0x67, 0x00, 0x6a, 0x6e, 0x99, 0x53, 0xdf, 0x99, 0xbe, 0xac, 0x67, 0x37, 0x2b, 0xd7, 0xf1,
	0x1d, 0xd4, 0x30, 0x17, 0x16, 0xf3, 0x15, 0x86, 0x93, 0xd5, 0xd2, 0x35, 0x16, 0x98, 0x73, 0xec,
	0x3f, 0xb1, 0xeb, 0x2b, 0xae, 0xf9, 0x6a, 0xb8, 0x26, 0xf6, 0x54, 0xfc, 0xc7, 0x1a, 0x7b, 0x3e,
	0xba, 0x84, 0x96, 0x6c, 0x2d, 0xbe, 0x98, 0x36, 0x6f, 0xba, 0xfd, 0xfa, 0x55, 0xfd, 0x53, 0x4b,
	0x4d, 0x04, 0x04, 0x95, 0xf0, 0x5b, 0x84, 0xee, 0x84, 0xe8, 0x46, 0xc0, 0x0c, 0xe1, 0xb2, 0xd2,
	0xfb, 0xca, 0x7a, 0x67, 0x06, 0x70, 0x1e, 0xe1, 0xda, 0x8b, 0xe1, 0x62, 0xd9, 0x5c, 0xc4, 0x61,
	0x99, 0x73, 0x38, 0x2b, 0x42, 0xc4, 0x66, 0x06, 0x4c, 0x04, 0x3c, 0x19, 0x96, 0xb9, 0x30, 0x7c,
	0xac, 0xf9, 0x86, 0xeb, 0x73, 0xd6, 0xda, 0xf3, 0xb1, 0x9b, 0xca, 0x3a, 0xc9, 0xab, 0x9e, 0xcb,
	0x0b, 0x0d, 0x01, 0x24, 0xfc, 0xc6, 0x1b, 0xbe, 0x91, 0xa4, 0x9d, 0x92, 0x30, 0x0c, 0x5c, 0x6d,
	0x8d, 0x41, 0xf2, 0x38, 0x84, 0xb6, 0x62, 0xda, 0xcb, 0x38, 0xdf, 0x36, 0xb4, 0xc2, 0x65, 0xb4,
	0x2f, 0xcd, 0x37, 0xfc, 0xb5, 0x17, 0x6e, 0xdb, 0x33, 0x1d, 0x3b, 0xd6, 0xbb, 0x87, 0xb3, 0x22,
	0xb4, 0xb2, 0xde, 0xd1, 0x0d, 0xa0, 0xf9, 0x46, 0x14, 0xaa, 0x60, 0xaf, 0x5f, 0xbf, 0x6a, 0x7c,
	0x6a, 0xa9, 0x25, 0x08, 0xd3, 0x83, 0xd3, 0xf0, 0x3b, 0xca, 0x34, 0x0e, 0xf0, 0x0d, 0x50, 0x4e,
	0x4e, 0xbc, 0xeb, 0x30, 0xb0, 0x4c, 0xcf, 0x97, 0x9f, 0xe3, 0xa2, 0xfa, 0x78, 0x95, 0x09, 0xd2,
	0xbe, 0xed, 0xdd, 0x98, 0x0b, 0xeb, 0xa6, 0x80, 0xab, 0xd5, 0x86, 0xcc, 0x1c, 0x8e, 0x0b, 0x62,
	0xf4, 0x01, 0x9a, 0x9e, 0x8f, 0x57, 0x41, 0xd5, 0xbb, 0xb7, 0xc7, 0x79, 0xaf, 0x9e, 0x1a, 0xc0,
	0xe8, 0x23, 0xec, 0x79, 0x81, 0x41, 0x50, 0xff, 0xee, 0xed, 0x51, 0xa0, 0x98, 0x8a, 0x1b, 0xc1,
	0xcc, 0x0f, 0x80, 0xb8, 0x17, 0x3c, 0xff, 0xce, 0x39, 0xf6, 0xb3, 0x19, 0xd7, 0x1b, 0xf5, 0x60,
	0x6f, 0x31, 0x53, 0x1c, 0xd7, 0x0f, 0xe2, 0xec, 0xaa, 0xd1, 0x8a, 0xf9, 0x05, 0xa8, 0x8c, 0x36,
	0xd9, 0x3c, 0x03, 0x9d, 0x79, 0xb0, 0x0c, 0x3d, 0x47, 0xfd, 0x90, 0x91, 0x31, 0x7d, 0xe8, 0x05,
	0x76, 0x1a, 0x5e, 0x9a, 0xb6, 0xe7, 0x1b, 0x96, 0x15, 0x17, 0xb4, 0x07, 0xa7, 0x05, 0x84, 0x1c,
	0xf2, 0x05, 0x0c, 0x14, 0x17, 0xaf, 0x0c, 0x37, 0x6c, 0x0e, 0x76, 0x89, 0x6d, 0x7f, 0xd3, 0xbe,
	0x03, 0x38, 0x2f, 0x03, 0x89, 0xdd, 0x57, 0x00, 0xce, 0x59, 0xdb, 0xbe, 0x82, 0x5d, 0x7e, 0x46,
	0xf6, 0xc1, 0xcf, 0x24, 0xe3, 0x15, 0x47, 0x59, 0x45, 0x2b, 0xd4, 0x87, 0x7d, 0xd6, 0x09, 0xf4,
	0x82, 0xfa, 0xec, 0xaa, 0xf1, 0x92, 0xb4, 0xf6, 0x08, 0x1b, 0xab, 0x10, 0x6b, 0x04, 0x58, 0x22,
	0x60, 0x7e, 0x82, 0xf3, 0x20, 0x5b, 0x79, 0xf6, 0x0d, 0xcf, 0xfd, 0x40, 0x96, 0x2a, 0x19, 0x9f,
	0x29, 0x59, 0xb8, 0x62, 0x24, 0x38, 0x2b, 0x9a, 0x90, 0xba, 0xfd, 0x0c, 0x5d, 0x72, 0xf6, 0x53,
	0xe7, 0x79, 0x3a, 0x27, 0xd2, 0xb8, 0x53, 0xc2, 0xa3, 0x4a, 0x36, 0xa1, 0x76, 0xc2, 0x16, 0x09,
	0x24, 0x1e, 0xc3, 0xc2, 0x49, 0xe0, 0xef, 0x29, 0xd3, 0xf9, 0x55, 0xe1, 0x11, 0x82, 0xe6, 0xc8,
	0xf1, 0xfc, 0xe8, 0x1a, 0x06, 0xdf, 0x8c, 0x00, 0xc7, 0x59, 0x17, 0x24, 0x9d, 0x1f, 0xe1, 0x44,
	0xf4, 0x22, 0x09, 0xe7, 0xbc, 0xae, 0x0c, 0xdf, 0x9c, 0x59, 0x61, 0xdd, 0x0e, 0xd4, 0x32, 0x88,
	0x90, 0x48, 0xe0, 0x86, 0x37, 0xbd, 0xef, 0x13, 0xcf, 0x58, 0xe2, 0xe4, 0x16, 0x9e, 0xe4, 0x81,
	0x28, 0x82, 0x86, 0x97, 0xaf, 0xd8, 0xf6, 0xef, 0x4c, 0x0b, 0x6b, 0xef, 0x5e, 0x80, 0x45, 0x97,
	0xb0, 0x0c, 0x22, 0xfc, 0x19, 0x9f, 0xf3, 0xcb, 0xda, 0x5f, 0x38, 0x6f, 0x76, 0x44, 0x12, 0x69,
	0xfe, 0x74, 0xf2, 0xfc, 0xe9, 0xa4, 0xf9, 0xd3, 0xce, 0xf3, 0xa7, 0x9d, 0xe6, 0xcf, 0x4a, 0xef,
	0xa4, 0x95, 0x3e, 0x6f, 0x5a, 0x50, 0xb4, 0xcd, 0x3c, 0x05, 0x56, 0xdd, 0x90, 0xa4, 0x35, 0x33,
	0x46, 0xc4, 0xdf, 0x5f, 0x75, 0xb8, 0xc8, 0x12, 0xf6, 0xa3, 0x91, 0x63, 0xd5, 0x2d, 0xb3, 0x60,
	0x08, 0x20, 0x5b, 0x8b, 0x1c, 0xab, 0x26, 0x92, 0x2c, 0x27, 0x37, 0xb6, 0x73, 0x72, 0xb3, 0xc0,
	0xc9, 0x17, 0x30, 0x28, 0x4f, 0x6d, 0x65, 0xbd, 0x5f, 0xff, 0x53, 0x87, 0x4e, 0x9a, 0x63, 0x10,
	0x05, 0x9d, 0x89, 0xf4, 0x20, 0xc9, 0xbf, 0x49, 0x53, 0x4d, 0x17, 0x14, 0xaa, 0x46, 0x24, 0xdc,
	0x48, 0xe0, 0x1e, 0xa6, 0x9c, 0x2c, 0xdd, 0x89, 0xf7, 0x54, 0x1d, 0x75, 0x01, 0x34, 0xe1, 0x5e,
	0x94, 0x34, 0x9d, 0x1d, 0x8f, 0xa9, 0x1d, 0xd4, 0x87, 0x53, 0x45, 0x15, 0x14, 0x56, 0x15, 0xa6,
	0xa2, 0x24, 0xea, 0x53, 0x6e, 0x3c, 0xd1, 0x74, 0x41, 0xa5, 0x1a, 0xe8, 0x18, 0x0e, 0x1f, 0x59,
	0xf2, 0x3d, 0x51, 0xee, 0x55, 0x96, 0x17, 0xa8, 0x26, 0x3a, 0x81, 0x23, 0x4d, 0x97, 0x15, 0x45,
	0xe0, 0x37, 0x7a, 0xbb, 0x69, 0x0f, 0x9a, 0xce, 0xaa, 0xfa, 0x94, 0xbd, 0x17, 0x24, 0x5d, 0xa3,
	0xf6, 0x48, 0x2c, 0x4e, 0x96, 0x9e, 0x04, 0x55, 0x13, 0x65, 0x89, 0xda, 0x0f, 0x62, 0x8f, 0x88,
	0x9e, 0x2c, 0xf2, 0x1a, 0x75, 0x80, 0x68, 0xe8, 0x3d, 0xb1, 0x63, 0x91, 0x67, 0xf5, 0xd8, 0x34,
	0xf6, 0xda, 0x42, 0x67, 0x70, 0x1c, 0xda, 0xea, 0x53, 0x45, 0x15, 0x1f, 0x59, 0x55, 0x14, 0x34,
	0x0a, 0xae, 0x75, 0x80, 0x14, 0xeb, 0x22, 0xe8, 0x26, 0x1b, 0x66, 0xf5, 0x89, 0x46, 0xd5, 0x50,
	0x1b, 0xf6, 0x15, 0x41, 0xe2, 0x45, 0x89, 0xec, 0xb6, 0x0d, 0xfb, 0xea, 0x44, 0x92, 0xc8, 0x62,
	0x07, 0x75, 0xe0, 0x80, 0x93, 0x1f, 0x95, 0xb1, 0xa0, 0x0b, 0x54, 0x03, 0x01, 0xec, 0xdd, 0xb1,
	0xe2, 0x58, 0xe0, 0xa9, 0xe6, 0xed, 0xdf, 0x2d, 0x38, 0xe0, 0x2c, 0x53, 0x77, 0x46, 0xeb, 0x19,
	0xba, 0x86, 0x26, 0x19, 0x6a, 0x88, 0x0a, 0x2e, 0x7c, 0x6a, 0xdc, 0xd1, 0xdd, 0x94, 0x84, 0x74,
	0x4e, 0x0d, 0x09, 0x70, 0x98, 0x99, 0x3b, 0x68, 0x10, 0x11, 0x7a, 0x71, 0x46, 0xd1, 0xe7, 0x65,
	0x50, 0xe8, 0x46, 0x02, 0x2a, 0x3f, 0x1f, 0xd1, 0x65, 0x4a, 0xbd, 0x30, 0x51, 0x69, 0xba, 0x02,
	0x0d, 0xfd, 0xfd, 0x0a, 0xed, 0xd4, 0x3c, 0x40, 0x61, 0xe4, 0xe2, 0x3c, 0xa1, 0xcf, 0x8a, 0x40,
	0xe8, 0xe0, 0x01, 0x8e, 0x72, 0xf4, 0x8f, 0x2e, 0x12, 0xdd, 0xc2, 0xb8, 0xa0, 0x07, 0xe5, 0xe0,
	0x66, 0x77, 0x79, 0xaa, 0x8d, 0x76, 0x57, 0x41, 0xda, 0xd1, 0xee, 0x4a, 0xf9, 0x99, 0xa9, 0xa1,
	0x2f, 0xd0, 0x49, 0xf3, 0x24, 0xea, 0x27, 0xda, 0x59, 0xf6, 0xa5, 0x7b, 0x25, 0x48, 0xe8, 0x63,
	0x04, 0xdd, 0x2c, 0x17, 0xa2, 0x54, 0xcc, 0x3c, 0x73, 0xd2, 0xfd, 0x52, 0x2c, 0xf4, 0xa4, 0x03,
	0x2a, 0x32, 0x0b, 0x1a, 0x86, 0xad, 0x52, 0xc5, 0x53, 0xf4, 0x65, 0x25, 0x1e, 0x7a, 0x9d, 0x27,
	0xa3, 0x34, 0x47, 0x82, 0xe8, 0xff, 0x69, 0xd3, 0x0a, 0x02, 0xa6, 0xff, 0xb7, 0x5d, 0x29, 0x0c,
	0xf2, 0x3b, 0x9c, 0x96, 0xb1, 0x0b, 0xba, 0x4a, 0x3f, 0x5f, 0xca, 0x38, 0x91, 0x1e, 0x6e, 0xd1,
	0xc8, 0x97, 0x25, 0xf5, 0x16, 0xc8, 0x96, 0xa5, 0xf8, 0x82, 0xc8, 0x96, 0xa5, 0xf0, 0x88, 0x08,
	0x5a, 0x29, 0xff, 0x40, 0x8e, 0x5a, 0xa9, 0xe2, 0x49, 0x1d, 0xb5, 0x52, 0xf9, 0xab, 0xba, 0x86,
	0x9c, 0x0d, 0xf5, 0x97, 0xbd, 0x79, 0xd1, 0xc7, 0xb4, 0xf1, 0x96, 0x97, 0x37, 0xfd, 0xe1, 0xbf,
	0x15, 0x37, 0xe7, 0x5a, 0xf1, 0x73, 0x10, 0x9d, 0xeb, 0xf6, 0x1f, 0x93, 0xe8, 0x5c, 0xb7, 0xfe,
	0x5f, 0xd4, 0x66, 0x7b, 0xc1, 0xbf, 0xce, 0xe7, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xc7,
	0xfe, 0x0c, 0xff, 0x0c, 0x00, 0x00,
}
